classdef Simulation < matlab.System
    % Simulation - Simulates the runner
    %   This class simulates the runner using the given parameters.
    
    properties
        % Parameters for the simulation
        NumMaxTx (1, 1) {mustBePositive, mustBeReal} = 10
        NumMaxTransmitTimes (1, 1) {mustBePositive, mustBeReal} = 4
        IsOverlap (1, 1) = false
        FrequencyOverlapRadio = [0, 0.5];
        TimeOverlapRadio = [0, 0.5];
        % 
        FrequencyIntervalRatio (2, 1) {mustBeReal} = [-50, 50]
        TimeIntervalRatio (2, 1) {mustBeReal} = [-50, 50]
        AnnlogRatio (1, 1) {mustBePositive, mustBeReal} = 10

        % Parameters for transmiter
        SamplePerSymbolRange (2, 1) {mustBePositive, mustBeReal} = [1; 18]
        TxTimeDurationRange (2, 1) {mustBePositive, mustBeReal} = [0.001; 0.01]
        SampleRateRange (2, 1) {mustBePositive, mustBeReal} = [10; 30e3] % KHz
        SampleRateStep (1, 1) {mustBePositive, mustBeInteger} = 10 % KHz    
        TxMasterClockRateRange (2, 1) {mustBePositive, mustBeReal} = [1e6; 10e6]
        
        AnalogModulatorPool = ["DSBAM", "DSBSCAM", "SSBAM", "VSBAM", "FM", "PM"]
        DigitalModulatorPool = ["APSK", "DVBSAPSK", "ASK", "CPFSK", "GFSK", "GMSK", "MSK", "FSK", "OFDM", "OOK", "OTFS", "PSK", "OQPSK", "QAM", "Mill88QAM", "SCFDMA"]
        NumTransmitAntennasRange (2, 1) {mustBePositive, mustBeReal, mustBeLessThan(NumTransmitAntennasRange, 5)} = [1, 4]

        % Parameters for receiver
        RxTimeDurationRange (2, 1) {mustBePositive, mustBeReal} = [0.1; 0.2]
        RxMasterClockRateRange (2, 1) {mustBePositive, mustBeReal} = [1e6; 10e6]
        NumReceiveAntennnasRange (2, 1) {mustBePositive, mustBeReal} = [1; 4]
        
        % Parameters for RF impairments
        
    end
    
    properties (Access = private)
        % State
        ModulatorOrderPool

    end
    
    methods
         function obj = Simulation(varargin)
            % FILEPATH: ChangShuoRadioData/csrd/runner/Simulation.m
            %
            % Simulation class constructor.
            %
            % Syntax:
            %   obj = Simulation(varargin)
            %
            % Description:
            %   This constructor creates an instance of the Simulation class.
            %
            % Input Arguments:
            %   - varargin: Variable number of input arguments.
            %
            % Output Arguments:
            %   - obj: Instance of the Simulation class.
            %
            % Example:
            %   sim = Simulation("param1", value1, "param2", value2);
            %
            % See also: Other classes and functions related to simulation.
            % Constructor
            setProperties(obj, nargin, varargin{:});

            % Single Carrier Modulator Order Pool
            obj.ModulatorOrderPool.DSBAM = 1;
            obj.ModulatorOrderPool.DSBSCAM = 1;
            obj.ModulatorOrderPool.SSBAM = 1;
            obj.ModulatorOrderPool.VSBAM = 1;
            obj.ModulatorOrderPool.FM = 1;
            obj.ModulatorOrderPool.PM = 1;
            obj.ModulatorOrderPool.APSK = [16, 32, 64, 128, 256];
            obj.ModulatorOrderPool.DVBSAPSK = [16, 32, 64, 128, 256];
            obj.ModulatorOrderPool.ASK = [4, 8, 16, 32, 64];
            obj.ModulatorOrderPool.CPFSK = [4, 8, 16, 32, 64];
            obj.ModulatorOrderPool.GFSK = [4, 8, 16, 32, 64];
            obj.ModulatorOrderPool.GMSK = 2;
            obj.ModulatorOrderPool.MSK = 2;
            obj.ModulatorOrderPool.FSK = [2, 4, 8, 16, 32];
            obj.ModulatorOrderPool.OOK = 2;
            obj.ModulatorOrderPool.PSK = [2, 4, 8, 16, 32, 64];
            obj.ModulatorOrderPool.OQPSK = 4;
            obj.ModulatorOrderPool.QAM = [8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096];
            obj.ModulatorOrderPool.Mill88QAM = [16, 32, 64, 256];
            
            % Multi Carrier Modulator Order Pool
            obj.ModulatorOrderPool.OFDM.PSK = [2, 4, 8, 16, 32, 64];
            obj.ModulatorOrderPool.OFDM.QAM = [8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096];
            obj.ModulatorOrderPool.OTFS.PSK = [2, 4, 8, 16, 32, 64];
            obj.ModulatorOrderPool.OTFS.QAM = [8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096];
            obj.ModulatorOrderPool.SCFDMA.PSK = [2, 4, 8, 16, 32, 64];
            obj.ModulatorOrderPool.SCFDMA.QAM = [8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096];

        end
    end

    methods (Access = protected)
        

        
        function [state, output] = stepImpl(obj, numFrames)
            % stepImpl - Simulates the runner for one time step
            %   This function simulates the runner for one time step.
            %   The input is the control input.
            %   The output is the state of the runner.
            
            x = cell(1, numFrames);
            for frameIndex=1:numFrames
                x{frameIndex} = cell(1, randi([0, obj.NumMaxTx]));
                for itemIndex=1:length(x{frameIndex})
                    x{frameIndex}{itemIndex} = obj.Modulator();
                end
                
            end
            
        end
    end

    methods (Access = private)
        function ys = Modulator(obj)
            
            SampleRate = (randi((obj.SampleRateRange(2)-obj.SampleRateRange(1))/obj.SampleRateStep)*obj.SampleRateStep+obj.SampleRateRange(1)) * 10e3;
            SamplePerSymbol = randi((obj.SamplePerSymbolRange(2)-obj.SamplePerSymbolRange(1)))+obj.SamplePerSymbolRange(1);
            NumTransmitAntennas = randi(obj.NumTransmitAntennasRange, 1);

            if randi(100) <= obj.AnnlogRatio
                parentModulatorType = "analog";
                % Limit the SampleRate of Analog < 1MHz
                if SampleRate > 100e3
                    SampleRate = 100e3;
                end
            else
                parentModulatorType = "digital";
            end

            if parentModulatorType == "analog"
                ModulatorType = obj.AnalogModulatorPool(randi(length(obj.AnalogModulatorPool)));
            else
                ModulatorType = obj.DigitalModulatorPool(randi(length(obj.DigitalModulatorPool)));
            end

            if ModulatorType == "OFDM" || ModulatorType == "OTFS" || ModulatorType == "SCFDMA"
                baseModulatorType = randsample(["psk", "qam"], 1);
                ModulatorOrder = obj.ModulatorOrderPool.(ModulatorType).(upper(baseModulatorType))(randi(length(obj.ModulatorOrderPool.(ModulatorType).(upper(baseModulatorType)))));
            else
                ModulatorOrder = obj.ModulatorOrderPool.(ModulatorType)(randi(length(obj.ModulatorOrderPool.(ModulatorType))));
            end
            
            NumTransmitTimes = randi(obj.NumMaxTransmitTimes, 1);
            ys = cell(1, NumTransmitTimes);
            for i = 1:NumTransmitTimes
                TimeDuration = rand(1)*(obj.TxTimeDurationRange(2)-obj.TxTimeDurationRange(1))+obj.TxTimeDurationRange(1);
                if parentModulatorType == "analog"
                    source = Audio(SampleRate = SampleRate, TimeDuration = TimeDuration);
                    NumTransmitAntennas = 1;
                else
                    source = RandomSource(SampleRate=SampleRate, ...
                        TimeDuration=TimeDuration, ...
                        ModulatorOrder=ModulatorOrder, ...
                        SamplePerSymbol=SamplePerSymbol);
                end
                baseBandSignal = sprintf("%s(SampleRate=SampleRate, TimeDuration=TimeDuration, ModulatorOrder=ModulatorOrder, SamplePerSymbol=SamplePerSymbol, NumTransmitAntennas=NumTransmitAntennas)", ModulatorType);
                baseBandSignal = eval(baseBandSignal);
                x = source();
                y = baseBandSignal(x);
                ys{1, i} = y;
            end
        end

        function y = tx(obj, x)
            
        end
    end
    
end


function tiling(xs, iso, t, f, mf)

num_tx = length(xs);

% 打乱顺序
tx_ids = randsample(1:num_tx, num_tx);

base_frequency = mf*(0.2+0.3*rand(1));
base_frequency = ceil(base_frequency/1000)*1000;
current_start_time = 0;
current_frequnecy_delta = 0;

new_row = true;
min_max_end_time = [10, 0];
for i=1:num_tx
    if new_row
        if iso
            current_start_time = current_start_time + min_max_end_time(1) - rand(0.001);
        else
            current_start_time = current_start_time + min_max_end_time(2) + rand(0.01) + 0.01;
        end
        new_row = false;
    end

    current_frequnecy_delta = current_frequnecy_delta + randi(10, 1)*10e3;
    current_band_width = 0;

    for j=1:length(xs{tx_ids{i}})
        x = xs{tx_ids{i}}{j};
        item_start_time = item_start_time + rand(0.001);
        x.StartTime = item_start_time;
        x.CarrierFrequency = current_frequnecy_delta + base_frequency;
        % The TX gap for the same tx
        item_start_time = item_start_time + x.TimeDuration;
        if x.BandWidth > current_band_width
            current_band_width = x.BandWidth(2) - x.BandWidth(1);
        end
        if min_max_end_time(1) > item_start_time
            min_max_end_time(1) = item_start_time;
        end
        if min_max_end_time(2) < item_start_time
            min_max_end_time(2) = item_start_time;
        end
        xs{tx_ids{i}}{j} = x;

    end
    
    current_frequnecy_delta = current_band_width + current_frequnecy_delta;

    if (current_frequnecy_delta + base_frequency + 10e3) > mf/2
        new_row = true;
    end

end

end