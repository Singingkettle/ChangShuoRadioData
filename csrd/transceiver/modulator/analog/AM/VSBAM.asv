classdef VSBAM < DSBAM
    
    
    properties (Dependent=false)
        h
    end

    methods
        
        function h = get.h(obj)
            f = (-obj.samplePerFrame/2:length(obj.samplePerFrame)/2-1)*(obj.sampleRate/obj.samplePerFrame);
            h = arrayfun(@(x)vsb_filer(x, obj.carrierFrequency, obj.modulatorConfig.fa, obj.modulatorConfig.mode), f);
            h = 
        end 

        function bw = bandWidth(obj, x)
            obj.carramp = min(abs(x));
            bw = obw(x - obj.carramp, obj.sampleRate) + obj.modulatorConfig.fa;
        end
        
        function  y = passBand(obj, x)
            y = filter(hi, [1], x);
        end
    end
    
end


function y = vsbmod(x, fc, fs, init_phase, fa)
% VSBMOD Residual sideband modulation.
%   Y = VSBMOD(X, Fc, Fs) uses the message signal X to modulate the carrier
%   frequency Fc (Hz) using single sideband amplitude modulation. X and Fc
%   have sample frequency Fs (Hz). The modulated signal has zero initial
%   phase, and the default sideband modulated is the upper sideband.

bw = obw(x);
x = lowpass(y, bw, fs, ImpulseResponse="fir", Steepness=0.99);


f = (-length(y)/2:length(y)/2-1)*(fs/length(y));
                             
hi = 2*real(ifft(Hi));         % impulse response of VSB filter
hi = ifftshift(hi);            % shift hi to have symmetrical form
hi = hi((NN/2)-100:(NN/2)+100);
%
% VSB signal generation
%
N = size(x);

phi = m'.*cos(2*pi*Fc*(0:N-1)/Fs + init_phase);
y = filter(hi, [1], phi)';

% --- EOF --- %

end


function y = vsb_filer(x, fc, fa, mode)

x  = abs(x);

if strcmp(mode, 'upper')
    if x < fc - fa
        y = 0;
    elseif x > fc + fa
        y = 1;
    else
        y = (x - fc + fa) /(2 * fa);
    end
else
     if x < fc - fa
        y = 1;
    elseif x > fc + fa
        y = 0;
    else
        y = (fc - fa - x) /(2 * fa) +  1;
     end

end

end
